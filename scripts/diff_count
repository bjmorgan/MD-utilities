#!/usr/bin/ruby -w

# November 23, 2011

# diff_count
# reads in tetrahedral occupations from "fort.40", and counts diffusion events
# reads in tetrahedra positions from "fort.20" to allow an approximation of the distance travelled during a diffusion event

require "matrix"

def load_file( filename )
  begin
    read_in = File.new( filename, 'r' )
  rescue
    abort "\"#{ filename }\" not found"
  end
end

class Site
  
  attr_accessor :id
  
  def self.centers=( array_of_centers )
    @@centers = array_of_centers
  end
  
  def self.ntet=( nlattice_sites )
    @@nlattice_sites = nlattice_sites
  end
  
  def initialize( site_number )
    @id = site_number
  end
  
  def center
    @@centers[ @id ]
  end
  
  def self.get_center( num )
    @@centers[ num ]
  end
  
  def is_lattice_site?
    !is_interstitial?
  end
  
  def is_interstitial?
    if ( is_tet? || is_oct? )
      return true
    else
      return false
    end
  end
  
  def copy
    return Site.new( id )
  end
  
  def is_oct?
    if ( @id == 0 )
      return true
    else
      return false
    end
  end
  
  def is_tet?
    if ( @id > @@nlattice_sites )
      return true
    else
      return false
    end
  end
  
end
    
class Ion
  
  attr_accessor :new_site, :old_site, :previous_site, :step_departed, :first_oct, :first_tet
  attr_reader :id
  
  @@nions = 0
  @@dr_sum = Vector.elements( [ 0.0, 0.0, 0.0 ] )
  
  def initialize( init_site )
    @@nions += 1
    @id = @@nions
    @new_site = Site.new( init_site )
    @previous_site = @new_site.copy
    @step_departed = nil
    clear_history
    update
  end
  
  def self.cell_lengths=( cell_lengths )
    @@cell_lengths = cell_lengths
  end
  
  def to_s
    puts "#{id}:{#{old_site.id},#{new_site.id}}"
  end
    
  def update
    @old_site = @new_site.copy
  end
    
  def clear_history
    @first_oct = false
    @first_tet = false
  end
  
  def distance_travelled
    dr2 = 0.0
    dr_vec = []
    ( @new_site.center - @old_site.center ).to_a.each_with_index do |dr, index| 
      if ( dr > @@cell_lengths[index]/2.0 ) then dr -= @@cell_lengths[index] end
      if ( dr < -@@cell_lengths[index]/2.0 ) then dr += @@cell_lengths[index] end
      dr2 += dr*dr
      dr_vec << dr
    end
    @@dr_sum += Vector.elements( dr_vec )
    return Math.sqrt( dr2 )
  end
  
  def self.net_displacement
    return Math.sqrt( @@dr_sum.to_a.inject(0) { |sum_sq, element| sum_sq + element * element } )
  end
  
end

abort "usage: diff_count N_MOBILE_IONS N_LATTICE_SITES [NSKIP]" if ARGV.length < 2

nions = ARGV[0].to_i # the number of mobile ions
ntet = ARGV[1].to_i # the number of available lattice sites
nskip = ARGV[2].nil? ? 1 : ARGV[2].to_i

ions = Array.new
Site.ntet = ntet
ndiff_oct = 0
ndiff_tet = 0
noct = 0
noct_longt = 0
ntet = 0
ntet_longt = 0
nFrenkel_oct = 0
nFrenkel_tet = 0
step = 1

tetfile = load_file( "fort.20" )
Site.centers = [ nil ] + tetfile.readlines.map { |line| Vector.elements( line.split.collect { |element| element.to_f } ) }

rstfile = load_file( "testout.rst" )
Ion.cell_lengths = rstfile.readlines[-3..-1].map{ |line| line.strip.to_f }

file = load_file( "fort.40" )
fileout = File.new("diff_count.out", "w")

file.gets.split[1..-1].each { |value| ions << Ion.new( value.to_i ) }

while ( tline = file.gets )
  break if tline.nil? # allow for a blank line at the end of the occupation file
  step += 1
  fileout.puts "New Step: #{step}"
  tline.split[1..-1].each_with_index { |value, index| ions[index].new_site.id = value.to_i }
  if ( step % nskip ) == 0
    ions.each do |ion|
      if ion.new_site.id != ion.previous_site.id # ion has moved to another site
        if ion.previous_site.is_lattice_site? # Frenkel pair created
          fileout.puts "Step #{step}: Ion #{ion.id} moved from lattice site #{ion.old_site.id}" 
          ion.step_departed = step 
          if ion.new_site.is_oct?
            nFrenkel_oct += 1
            ion.first_oct = true
          else
            nFrenkel_tet += 1
            ion.first_tet = true
          end
        elsif ion.new_site.is_lattice_site? # Frenkel pair annihilated
          if ion.new_site.id == ion.old_site.id # Ion has returned to original site. No net diffusion.
            fileout.puts "Step #{ion.step_departed}=>#{step}: Ion #{ion.id} returned to lattice site #{ion.old_site.id}"
          elsif ion.old_site.is_lattice_site? # Ion has moved to a new lattice site. Complete diffusion event.
            fileout.puts "Step #{ion.step_departed}=>#{step}: Ion #{ion.id} moved from lattice site #{ion.old_site.id} to #{ion.new_site.id} in #{step - ion.step_departed} steps"
            fileout.puts "distance between lattice sites: #{ion.distance_travelled}"
            fileout.puts "net displacement: #{Ion.net_displacement}"
            ion.update
            ndiff_oct += 1 if ion.first_oct == true
            ndiff_tet += 1 if ion.first_tet == true
          end
          ion.clear_history
        end
      else # ion has stayed at the same site
        if ion.new_site.is_interstitial? 
          if ion.new_site.is_oct?
            noct_longt += 1
          else
            ntet_longt += 1
          end
        end
      end
      if ion.new_site.is_interstitial? # interstitial exists
        if ion.new_site.is_oct? 
          noct += 1
        else
          ntet += 1
        end
      end
      ion.previous_site = ion.new_site.copy
    end
  end
end

printf "%2.4f\t\tFrenkel pairs formed with Ag_i(Oh)\n" % [nFrenkel_oct.to_f / (step/nskip).to_f]
puts "%2.4f\t\tFrenkel pairs formed with Ag_i(Td)\n" % [nFrenkel_tet.to_f / (step/nskip).to_f]
puts "#{noct.to_f / step.to_f}\t\tn(Ag_i(Oh))"
puts "#{noct_longt.to_f / step.to_f}\t\tn(Ag_i(Oh)) sequential frames"
puts "#{ntet.to_f / step.to_f}\t\tn(Ag_i(Td))"
puts "#{ntet_longt.to_f / step.to_f}\t\tn(Ag_i(Td)) sequential frames"
printf "%.5f => %.5f \tOh diffusion events\n" % [ndiff_oct.to_f / (step/nskip).to_f, 100*ndiff_oct.to_f/nFrenkel_oct.to_f ]
printf "%.5f => %.5f pct\tTd diffusion events\n" % [ndiff_tet.to_f / (step/nskip).to_f , (100*ndiff_tet.to_f/nFrenkel_tet.to_f) ]
printf "%.5f => %.5f pct\tall diffusion events\n" % [( ndiff_oct + ndiff_tet ).to_f / (step/nskip).to_f , (100*( ndiff_oct + ndiff_tet).to_f / (nFrenkel_tet + nFrenkel_oct).to_f) ]